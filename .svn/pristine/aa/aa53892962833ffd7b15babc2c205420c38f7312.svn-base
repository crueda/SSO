var jwt = require('jwt-simple');
var UserModel = require('../models/users');

var Log = require('log');
var fs = require('fs');
//var log = new Log('debug', fs.createWriteStream('/var/log/sso.log'));
var log = new Log('debug', fs.createWriteStream('/Users/Carlos/Workspace/SUMO/SSO/sso.log'));

module.exports = function(req, res, next) {

  var token = (req.body && req.body.access_token) || (req.query && req.query.access_token) || req.headers['x-access-token'];
  var key = (req.body && req.body.x_key) || (req.query && req.query.x_key) || req.headers['x-key'];

  console.log("auten");

  if (token || key) {
    try {
      var decoded = jwt.decode(token, require('../config/secret.js')());

      console.log(decoded);

      if (decoded.exp <= Date.now()) {
        log.info('Token Expired para:'+key);

        res.status(400);
        res.json({
          "status": 400,
          "msg": "Token Expired"
        });
        return;
      }

      var username = 'carm';
      // Authorize the user to see if s/he can access our resources
      UserModel.getUser(username,function(error, dbUser) {
          if (typeof dbUser == 'undefined' || dbUser.length == 0) {
              //res.json(401,{"msg":"Invalid User"});

              res.status(401);
              res.setHeader('Content-Type', 'text/plain');
              res.json({
                "status": 401,
                "msg": "Invalid user"
              });
              return;

          }
      });

/*
      //var dbUser = validateUser(key); // The key would be the logged in user's username
      var dbUser = { // spoofing a userobject from the DB.
        name: 'sumo',
        role: 'admin',
        username: 'sumo'
      };
*/
      if (dbUser) {


        if ((req.url.indexOf('admin') >= 0 && dbUser.role == 'admin') || (req.url.indexOf('admin') < 0 )) {
          next(); // To move to next middleware

        } else {
          res.status(403);
          res.json({
            "status": 403,
            "msg": "Not Authorized"
          });
          return;
        }
      } else {
        // No user with this name exists, respond back with a 401
        res.status(401);
        res.json({
          "status": 401,
          "msg": "Invalid User"
        });
        return;
      }

    } catch (err) {
      res.status(500);
      res.json({
        "status": 500,
        "msg": "Oops something went wrong",
        "error": err
      });
    }
  } else {
    res.status(401);
    res.json({
      "status": 401,
      "msg": "Invalid Token or Key"
    });
    return;
  }
};
